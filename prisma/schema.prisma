// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id         Int       @id @default(autoincrement())
  full_name  String    @db.VarChar(55)
  username   String    @db.VarChar(55)
  password   String    @db.VarChar(56)
  created_at DateTime  @default(now())
  updated_at DateTime  @updatedAt
  posts      Post[]
  likes      Like[]
  views      View[]
  comments   Comment[]

  @@map("users")
}

model Post {
  id       Int       @id @default(autoincrement())
  content  String
  title    String    @db.VarChar(55)
  user_id  Int
  user     User      @relation(fields: [user_id], references: [id])
  likes    Like[]
  views    View[]
  comments Comment[]

  @@map("posts")
}

model Like {
  id      Int   @id @default(autoincrement())
  user_id Int
  post_id Int
  post    Post  @relation(fields: [post_id], references: [id])
  User    User? @relation(fields: [userId], references: [id])
  userId  Int?

  @@unique([user_id, post_id])
  @@map("likes")
}

model View {
  id      Int   @id @default(autoincrement())
  user_id Int
  post_id Int
  post    Post  @relation(fields: [post_id], references: [id])
  User    User? @relation(fields: [user_id], references: [id])

  @@unique([user_id, post_id])
  @@map("views")
}

model Comment {
  id      Int    @id @default(autoincrement())
  comment String @db.VarChar(255)
  user_id Int
  post_id Int
  post    Post   @relation(fields: [post_id], references: [id])
  User    User?  @relation(fields: [user_id], references: [id])

  @@map("comments")
}
